name: Build Cloud Ladder Flowise

on:
  workflow_dispatch:
    inputs:
      sha:
        description: 'sha'
        required: true
        type: string
      docker_registry:
        description: 'docker_registry'
        required: true
        type: string
      docker_registry_name:
        description: 'docker_registry_name'
        required: true
        type: string
      docker_registry_password:
        description: 'docker_registry_password'
        required: true
        type: string
      docker_image_name:
        description: 'docker_image_name'
        required: true
        type: string
env:
  IMAGE_NAME: ${{inputs.docker_image_name}}

jobs:
  sync-repo-build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          node-version: 16
          repository: lowcode-yunti/flowise
          ref: ${{inputs.sha}}
          token: ${{ secrets.CLOUD_LADDER_DISPATCH }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8.14.1
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ inputs.docker_registry_name }}
          password: ${{ inputs.docker_registry_password }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#      - name: Get short SHA
#        id: short-sha
#        run: echo "::set-output name=short_sha::$(echo ${inputs.sha::9})"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          build-args: REACT_APP_COMMIT_ID=${{ steps.short-sha.outputs.short_sha }}
          push: true
          file: ./Dockerfile
          tags: ${{inputs.docker_registry}}/${{env.IMAGE_NAME}}:${{ inputs.sha }},${{inputs.docker_registry}}/${{env.IMAGE_NAME}}:latest
          labels: ${{ steps.meta.outputs.labels }}
          platform: linux/amd64,linux/arm64,linux/arm/v7
